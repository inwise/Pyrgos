The repository implements a part of "Pyrgos" - a solution for market calibration, risk management and option pricing.

The code and algorithms presented are protected by patent № 252062129, Federal Institutre of Industrial Property and created as a part of a research supported by RFBR grant (project 15-32-01390).

See 'license' file in the repository for license information.

A. Grechko, O. Kudryavtsev and V. Rodochenko, Inwise-Systems, 2015-2017.

Представляемый репозиторий является частью программного комплекса "Пиргос" ("Информационная система для управления рисками инвестиционного портфеля на основе исторических данных фондового и срочного рынков – Пиргос"), направленного на регистрацию в ФГБУ «Федеральный институт промышленной собственности» под названием , заявление № 252062129. Комплекс разработан в при поддержке РФФИ в рамках проекта 15-32-01390.

Задачи, решаемые комплексом: управление рисками на финансовых рынках. Проект предоставляет возможности вычисления стоимости опционов, калибровки моделей, а также расчёта альтернативных индексов волатильности.

А.С. Гречко, О.Е. Кудрявцев, В.В. Родоченко, ИнВайз Системс, 2015-2017.

//---------------------------------------------------------------------------

Подпрограммы в этой категории реализуют возможность построения торговых стратегий для активов, торгуемых на Московской бирже.

Входными данными являются .csv файлы с историей торгов по инструменту, содержащие заголовки
<CLOSE> - цена закрытия инструмента
<RSI> - значения индикатора RSI
<VOL> - значения индикатора "волатильность"
<DI+> - значения индикатора DI+
<DI-> - значения индикатора DI-

Подрограммы "position_maker.py" и "position_maker_modified.py" читают исходный файл и формирует новый, с колонками 

<BUY> - сигнал на покупку
<SELL> - сигнал на закрытие длинной позиции
<SHORT> - сигнал на продажу
<COVER> - сигнал на закрытие короткой позиции

Подпрограммы реализуют "жадную" и "осторожную" стратегии следования тренду, соответственно.

Программы "random_forest_classification.py" и "random_forest_regression.py" требуют на вход аналогичный файл и обучают случайный лес.
После обучения, программы формируют новый файл с колонкой <FOREST_UP_DOWN>, в случае леса классификации, либо <FOREST_CLOSE>, в случае леса регрессии, в которых обозначены предсказания случайного леса.
Подпрограммы "forest_classifier_position_maker.py" и "random_forest_classifier_pipeline.py" реализуют построение стратегии с использованием предсказаний, которые можно получить от случайного леса.

Подпрограмма "strategy_pipeline" содержит весь набор методов, который нужно применить для построения "жадной" стратегии следования тренду.

Аналогично, подпрограмма "strategy_pipeline_careful" содержить весь набор методов, который нужно применить для построения "осторожной" стратегии следования тренду.

Обе формируют логи на русском и английском языках.

Пропрограмма "strategy_metrics.py" содержит методы для проверки стратегии на валидность и подсчёта метрик.
Пропрограмма "strategy_stats.py" содержит методы для подсчёта метрик.

//-------------------------------------------------------

Пиргос
А.С. Гречко, О.Е. Кудрявцев, В.В. Родоченко, ИнВайз Системс, 2015-2017.
